public class Solution { 
    public double findMedianSortedArrays(int A[], int B[]) { 
        int m = A.length; 
        int n = B.length; 

        if( (m + n) % 2 != 0 ) // odd number of total elements 
            return (double)findKth(A, B, (m + n) / 2, 0, m-1, 0, n-1); 
        else { // even 
            return ( findKth(A, B, (m + n) / 2, 0, m-1, 0, n-1) + 
                findKth(A, B, (m + n) / 2 - 1, 0, m-1, 0, n-1) ) * 0.5; 
        } 
    } 

    public static int findKth(int A[], int B[], int k, 
            int ista_A, int iend_A, int ista_B, int iend_B) { 

        int nA = iend_A - ista_A + 1; 
        int nB = iend_B - ista_B + 1; 

        // Special cases 
        if( nA == 0 ) return B[ista_B + k]; 
        if( nB == 0 ) return A[ista_A + k]; 
        if( k == 0) return A[ista_A] < B[ista_B] ? A[ista_A] : B[ista_B]; 

        // Reduce search ranges in A and B 
        int imid_A = nA * k / (nA + nB); 
        int imid_B = k - imid_A - 1; 

        // Add offset so that imid_A and imid_B index directly into A and B, 
        // respectively 
        imid_A += ista_A; 
        imid_B += ista_B; 


        if( A[imid_A] > B[imid_B] ) { 
            k -= imid_B - ista_B + 1; 
            iend_A = imid_A; 
            ista_B = imid_B + 1; 
        } else { 
            k -= imid_A - ista_A + 1; 
            iend_B = imid_B; 
            ista_A = imid_A + 1; 
        } 
        
        return findKth(A, B, k, ista_A, iend_A, ista_B, iend_B); 

    } 
} 



http://www.cnblogs.com/pengzheng/archive/2013/05/15/3079505.html

http://mitbbstop.blogspot.com/2013/06/median-of-two-sorted-arraysjava-code.html
http://gongxuns.blogspot.com/2012/12/leetcodemedian-of-two-sorted-arrays.html
http://www.mitbbs.com/article_t1/JobHunting/32203647_0_2.html



static int searchKth(int[] a, int[] b, int k)
    {
        if (k <= 0)
            return Math.min(a[0], b[0]);
        if (k > a.length + b.length)
            return Math.max(a[a.length-1], b[b.length-1]);

        int l = 0;
        int h = Math.min(a.length-1, k-1);
        while (l <= h)
        {
            int x = (l + h)/2;

            int a_x = a[x];
            int a_x_1 = (x - 1 < 0 ? Integer.MIN_VALUE : a[x-1]);
            int b_k_x = (k - x >= b.length ? Integer.MAX_VALUE : b[k-x]);
            int b_k_x_1 = (k - x - 1 >= b.length ? Integer.MAX_VALUE : b[k-x
-1]);

            if (a_x < b_k_x_1)
                l = x + 1;
            else if (a_x_1 > b_k_x)
                h = x - 1;
            else
                return Math.max(a_x_1, b_k_x_1);
        }

        return -1;
    }
public class Solution {
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        int A[] = {};
        int B[] = { 1, 2, 3, 4, 5 };
        double c = new Solution().findMedianSortedArrays(A, B);
        System.out.println(c);
    }

    public double findMedianSortedArrays(int A[], int B[]) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int startA = 0;
        int startB = 0;
        int tempS = 0, tempE = 0;
        double end = ((double) A.length + B.length) / 2;
        while (startA + startB < end) {
            if (startA >= A.length) {
                tempS = B[startB];
                startB++;
            } else if (startB >= B.length) {
                tempS = A[startA];
                startA++;
            } else if (A[startA] > B[startB]) {
                tempS = B[startB];
                startB++;
            } else {
                tempS = A[startA];
                startA++;
            }

        }
        if ((A.length + B.length) % 2 == 1) {
            tempE = tempS;

        } else if (startA >= A.length) {
            tempE = B[startB];

        } else if (startB >= B.length) {
            tempE = A[startA];

        } else if (A[startA] > B[startB]) {
            tempE = B[startB];

        } else {
            tempE = A[startA];

        }
        return ((double) tempS + tempE) / 2;

    }
}