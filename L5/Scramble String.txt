public class Solution {
     public boolean isScramble(String s1, String s2) {
    // Start typing your Java solution below
    // DO NOT write main() function
    if (s1.equals(s2)) {
      return true;
    }
    if (s1.length() != s2.length()) {
      return false;
    }

    // Pruning
    // If s1 and s2 contain different characters, return false.
    int[] a = new int[256];
    java.util.Arrays.fill(a, 0);
    for (int i = 0; i < s1.length(); i++) {
      char c = s1.charAt(i);
      a[c - 'a']++;
    }
    for (int i = 0; i < s2.length(); i++) {
      char c = s2.charAt(i);
      a[c - 'a']--;
    }
    for (int i = 0; i < 256; i++) {
      if (a[i] != 0) {
        return false;
      }
    }
    
    for (int i = 1; i < s1.length(); i++) {
      String s1L = s1.substring(0, i);
      String s1R = s1.substring(i);

      String s2L = null;
      String s2R = null;
      
      s2L = s2.substring(0, i);
      s2R = s2.substring(i);

      if (isScramble(s1L, s2L) && isScramble(s1R, s2R)) {
        return true;
      }

      s2L = s2.substring(0, s2.length() - i);
      s2R = s2.substring(s2.length() - i);

      if (isScramble(s1L, s2R) && isScramble(s1R, s2L)) {
        return true;
      }

    }
    return false;

  }

}

http://blog.csdn.net/abcbc/article/details/8958303

------------------

http://tech-wonderland.net/blog/leetcode-wildcard-matching.html


http://blog.sina.com.cn/s/blog_b9285de20101gy6n.html


public class Solution {
  public boolean isScramble(String s1, String s2)
    {
        int n=s1.length();
        boolean[][][] dp=new boolean[n][n][n+1];
        
        for(int i=n-1; i>=0; i--)
            for(int j=n-1; j>=0; j--)
                for(int k=1; k<=n-Math.max(i,j);k++)
                {
                    if(s1.substring(i,i+k).equals(s2.substring(j,j+k)))
                        dp[i][j][k]=true;
                    else
                    {
                        for(int l=1; l<k; l++)
                        {
                            if(dp[i][j][l] && dp[i+l][j+l][k-l] || dp[i][j+k-l][l] && dp[i+l][j][k-l])
                            {
                                dp[i][j][k]=true;
                                break;
                            }
                        }
                    }
                }
        
        return dp[0][0][n];
    }

}