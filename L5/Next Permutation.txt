public class Solution {
    public void nextPermutation(int[] num) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int len = num.length;
        int vioIndex = len - 1;
        while(vioIndex > 0){
            if(num[vioIndex - 1] < num[vioIndex]){
                break;
            }
            vioIndex --;
        }
        
        if(vioIndex > 0){
            vioIndex --;
            int right = len - 1;
            while(right >= 0 && num[vioIndex] >= num[right]){
                right --;
            }
            
            int tmp = num[vioIndex];
            num[vioIndex] = num[right];
            num[right] = tmp;
            vioIndex ++;
        }
        
        int end = len - 1;
        while(vioIndex < end){
            int tmp = num[vioIndex];
            num[vioIndex] = num[end];
            num[end] = tmp;
            vioIndex ++;
            end --;
        }
        
        
    }
}

http://www.cnblogs.com/feiling/p/3228736.html


http://www.cnblogs.com/qsort/archive/2011/08/11/2134338.html



http://blog.csdn.net/lbyxiafei/article/details/9338399


public class Solution {
    public void nextPermutation(int[] num) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int current = num.length - 1;
        while(current>0 && num[current-1]>=num[current])
            current--;
        reverse(num, current, num.length-1);
        
        int next = current;
        current--;
        while(next < num.length){
            if(current>=0  && num[next]>num[current]){
                swap(num, next, current);
                break;
            }
            next++;
        }
    }
    private void swap(int[] num, int i, int j){
        int tmp = num[i];
        num[i] = num[j];
        num[j] = tmp;
    }
    private void reverse(int[] num, int i, int j){
        while(i < j)
            swap(num, i++, j--);
    }
}