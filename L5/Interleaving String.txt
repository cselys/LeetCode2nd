public class Solution {  
    public boolean isInterleave(String s1, String s2, String s3) {  
        // Start typing your Java solution below  
        // DO NOT write main() function  
        int l1 = s1.length();  
        int l2 = s2.length();  
        int l3 = s3.length();  
          
        if(l1+l2!=l3) return false;         
        boolean[][] hit = new boolean[l1+1][l2+1];  
        hit[0][0] = true;  
        for(int i=1; i<=l1; i++) {  
            if(s1.charAt(i-1) == s3.charAt(i-1) )    
                hit[i][0] = true;  
        }  
          
          
        for(int i=1; i<=l2; i++) {  
            if(s2.charAt(i-1) == s3.charAt(i-1) )    
                hit[0][i] = true;  
        }  
          
        for(int i=1; i<=l1; i++) {  
            for(int j=1; j<=l2; j++) {  
                if(s1.charAt(i-1) == s3.charAt(i+j-1)) {  
                    hit[i][j] = hit[i-1][j];  
                }  
                if(s2.charAt(j-1) == s3.charAt(i+j-1) ) {  
                    hit[i][j] = hit[i][j-1] | hit[i][j];   
                }  
                  
            }  
              
        }  
        return hit[l1][l2];  
    }  
}




http://blog.csdn.net/u011095253/article/details/9248073


Solution1: 二维dp， f(i, j) == f(i, j-1) && s2[j-1] == s3[i+j-1)  OR f(i-1, j) && s1[i-1] == s3[i+j-1],
                 i, j 代表 s1, s2 的长度，f(i, j) 表示 s1[0, i), s2[0, j) 是否可以interleaving 形成 s3[0, i+j)

http://qiang129.blogspot.com/2013/05/leetcode-interleaving-string.html


http://blog.unieagle.net/2012/09/29/leetcode%E9%A2%98%E7%9B%AE%EF%BC%9Ainterleaving-string%EF%BC%8C%E4%BA%8C%E7%BB%B4%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/

http://blog.csdn.net/xudli/article/details/8570572

http://tech-wonderland.net/blog/leetcode-interleaving-string.html

http://www.cnblogs.com/lichen782/p/leetcode_interleaving_string.html
