public class Solution {
    public int uniquePaths(int m, int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int[][] ret=new int[m][n];
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0&&j==0) ret[i][j]=1;
                else{
                    ret[i][j]=(i>0?ret[i-1][j]:0)+(j>0?ret[i][j-1]:0);
                }
            }
            
        }
        return ret[m-1][n-1];
        
    }
}


------------

//recursive
public class Solution {
    public int uniquePaths(int m, int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        m--;n--;
        return path(m,n);
    }
    public int path(int m,int n){
        if(m==0 && n==0) return 1;
        if(m<0 || n<0) return 0;
        return   path(m-1,n) + path(m, n-1);
    }
}
 
//DP:
 
public class Solution {
    public int uniquePaths(int m, int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int dp[][] = new int[m][n];
        for(int i =0;i<m;i++)
            dp[i][0] = 1;
        for(int i =0;i<n;i++)
            dp[0][i] = 1;
        for(int i = 1; i<m;i++){
            for(int j = 1;j<n;j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
         
    }
}