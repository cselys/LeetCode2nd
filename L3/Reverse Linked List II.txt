/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */



public class Solution {  
    public ListNode reverseBetween(ListNode head, int m, int n) {  
        // Start typing your Java solution below  
        // DO NOT write main() function  
        if( head==null | m==n) return head;  
          
        ListNode start = new ListNode(0);  
        start.next = head;  
        head = start;  
        n=n-m+1;   
          
        while(--m>0 && start!=null) start = start.next;  
        if(start==null) return head.next;  
          
        ListNode cur = start.next;  
        ListNode pre = null;  
        ListNode nxt = null;  
          
        while(cur!=null && n-->0) {  
            nxt = cur.next;  
            cur.next = pre;  
            pre = cur;  
            cur = nxt;  
        }  
        start.next.next = cur;  
        ListNode t = start.next;  
        start.next = pre;  
        start = t;  
          
        return head.next;  
    }  
}


-----------------------------------

public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(head==null) return head;
        
        ListNode temp=new ListNode(0);
        temp.next=head;
        
        ListNode cur=head.next, pre=head, next, start=temp;
        
        int count =1;
        
        while(count<=n){
            if(count>=m && count<n){
                next=cur.next;
                cur.next=pre;
                pre=cur;
                cur=next;
            }else if(count==n){
                start.next.next=cur;
                start.next=pre;
            }else{
                start=pre;
                pre=cur;
                cur=cur.next;
            }
            count++;            
        }
        return temp.next;
    }
}

---------------

not in place:

public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n){
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
       
        int len = n-m+2;
        ListNode[] all = new ListNode[len];
       
        ListNode start = dummy;
        for(int i=0; i<m-1; i++) {start = start.next;}
       
        all[0] = start;
        for(int i=1; i<len; i++) all[i] = all[i-1].next;
       
        start.next = all[len-1];
        all[1].next = all[len-1].next;
        for(int i=len-1; i>1; i--) all[i].next = all[i-1];
       
        return dummy.next;
    }
}

-----------------------------

