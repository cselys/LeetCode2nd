http://blog.csdn.net/zyfo2/article/details/8592955
public class Solution {  
    public ArrayList<ArrayList<Integer>> combinationSum(int[] a, int target) {  
        // Start typing your Java solution below  
        // DO NOT write main() function  
        ArrayList<ArrayList<Integer>> res=new ArrayList<ArrayList<Integer>>();  
        ArrayList<Integer> l=new ArrayList<Integer>();  
        Arrays.sort(a);  
        solve(a,target,0,0,l,res);  
        return res;  
    }  
    public void solve(int[] a, int target, int sum, int i, ArrayList<Integer> l, ArrayList<ArrayList<Integer>> res){  
        if(sum==target){ res.add(l); return;}  
        if(sum>target||i>=a.length) return;  
        int n=0;  
        while(n*a[i]+sum<=target){  
            solve(a,target,sum+n*a[i],i+1,l,res);  
            ArrayList<Integer> tmp=new ArrayList<Integer>(l);  
            l=tmp;  
            l.add(a[i]);  
            n++;  
              
        }  
        return;  
    }  
      
} 
------------
public class Solution {
    public ArrayList<ArrayList<Integer>> combinationSum(int[] candidates, int target) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> list = new ArrayList<Integer>();
        if(candidates.length == 0) return ret;
        Arrays.sort(candidates);
        
        combinationSumHelper(candidates, target, 0, 0, ret, list);
        
        return ret;
    }
    
    public void combinationSumHelper(int[] input, int target, int start, int sum,
                                    ArrayList<ArrayList<Integer>> ret,
                                    ArrayList<Integer> list) {
        if(sum > target) return;// Note: This method cannot finish large set if this line is missing
        for(int i = start; i < input.length; i++) {
            list.add(input[i]);
            sum += input[i];
            if(sum == target) {
                ret.add(new ArrayList<Integer>(list));
                sum -= list.get(list.size() - 1);
                list.remove(list.size() - 1);
                return;
            }
 
            if(sum < target) {
                combinationSumHelper(input, target, i, sum, ret, list);
            } else {
                combinationSumHelper(input, target, i+1, sum, ret, list);
            }
 
            sum -= list.get(list.size() - 1);
            list.remove(list.size() - 1);
        }
        
        return;
    }
}


--------------
public class Solution {
    public ArrayList<ArrayList<Integer>> combinationSum(int[] candidates, int target) {
        // Start typing your Java solution below
        // DO NOT write main() function
        Arrays.sort(candidates);
        ArrayList<ArrayList<Integer>> prev = new ArrayList<ArrayList<Integer>>();
        prev.add(new ArrayList<Integer>());
        return combinationSum(candidates,target,0,prev);
        
    }
    
   ArrayList<ArrayList<Integer>> combinationSum(int[] candidates, int target,  int start, ArrayList<ArrayList<Integer>> prev){
ArrayList<ArrayList<Integer>> res = new  ArrayList<ArrayList<Integer>>();
        if(target==0){
            for(ArrayList<Integer> temp:prev){
                ArrayList<Integer> temp1 = new ArrayList<Integer>(temp);   
                res.add(temp1);
            }    
            return res;
        }    
         
          for(int j=start;j<candidates.length;j++){
              if(target<candidates[j]) break;
              for(ArrayList<Integer> temp:prev)
                  temp.add(candidates[j]);
                  ArrayList<ArrayList<Integer>> next = combinationSum(candidates,target-candidates[j],j,prev);                  
              
          	  if(next.size()>0)
                    res.addAll(next);
	          for(ArrayList<Integer> temp:prev)
       	           temp.remove(temp.size()-1);
          }
     return res;       
            
    }
    
}
