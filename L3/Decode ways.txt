Solution and Precautions:

This could be solved by DP. Let F(n) denote the number of decode ways for a string of length n. The following is the recursive formula:

F(n) = F(n-1) + F(n-2)     if s[n] is a valid encoding digit and s[n-1]s[n] is also a valid encoding number.

F(n) = F(n-1)                     if s[n] is a valid encoding digit and s[n-1]s[n] is NOT a valid encoding number.

F(n) = F(n-2)                     if s[n] is NOT a valid encoding digit and s[n-1]s[n] is  a valid encoding number.

            F(n) = 0                             if s[n] is NOT a valid encoding digit and s[n-1]s[n] is NOT  a valid encoding number.



http://tech-wonderland.net/blog/leetcode-decode-ways.html


public class Solution {
    public int numDecodings(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(s==null||s.length()==0) return 0;
        int[] c=new int[s.length()+1];
        
        c[0]=1;
        
        if(s.charAt(0)!='0') c[1]=c[0];
        else c[1]=0;
        
        for(int i=2;i<s.length()+1;i++){
            if(s.charAt(i-1)=='0'){
                c[i]=0;
            }else
            c[i]=c[i-1];
            
            if(s.charAt(i-2)=='1' ||(s.charAt(i-2)=='2'&& s.charAt(i-1)<='6'))
            c[i]+=c[i-2];
        }
        return c[s.length()];
    }
}

---------------
http://blog.csdn.net/u011095253/article/details/9248109

public class Solution {
    public int numDecodings(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(s.length()==0) return 0;
        int[] hist = new int[2];
        hist[0]=1;
        hist[1]=1;
        
        for(int i=0;i<s.length();i++){
            int temp=0;
            if(s.charAt(i)!='0')
                temp+=hist[1];
            if(i>0){
                int a = Integer.parseInt(s.substring(i-1,i+1));
                if(s.charAt(i-1)!='0' && a<=26 && a>=1)
                    temp+=hist[0];
            }
            hist[0]=hist[1];
            hist[1]=temp;
        }
        
        return hist[1];
    }
}