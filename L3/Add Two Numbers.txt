/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Start typing your Java solution below
        // DO NOT write main() function
        StringBuilder strRet=new StringBuilder();
        ListNode head=new ListNode(0);
        ListNode ret=head;
        
        int carrier=0;
        
        while(l1!=null || l2!=null ){
            if(l1!=null) {                
                carrier+=l1.val;
                l1=l1.next;
            }            
            
            if(l2!=null) {                
                carrier+=l2.val;
                l2=l2.next;
            }     
            
           
           

          head.next=new ListNode(carrier%10);
           carrier=carrier/10;
                head=head.next;
        }
        
        if(carrier==1) head.next=new ListNode(1);
        
        return ret.next;
    }
}
----------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode L1, ListNode L2) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ListNode head=new ListNode(0),cur=head;
        int carry=0;
        
        while(L1!=null && L2!=null){
            int sum=L1.val+L2.val+carry;
            cur.next=new ListNode(sum%10);
            carry=sum/10;
            cur=cur.next;
            L1=L1.next;
            L2=L2.next;
        }
        while(L1!=null){
            int sum=L1.val+carry;
            cur.next=new ListNode(sum%10);
            carry=sum/10;
            cur=cur.next;
            L1=L1.next;
        }
        while(L2!=null){
            int sum=L2.val+carry;
            cur.next=new ListNode(sum%10);
            carry=sum/10;
            cur=cur.next;
            L2=L2.next;
        }
        if(carry==1) cur.next=new ListNode(1);
        return head.next;
    }
}