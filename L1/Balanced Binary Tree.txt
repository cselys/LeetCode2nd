/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
       if(root==null) return true;
        return getH(root)!=-1;

    }
    
    int getH(TreeNode root){
    if(root==null) return 0;
    int lh=getH(root.left);
    if(lh==-1) return -1;
    int rh=getH(root.right);
    if(rh==-1) return -1;
    
    if(Math.abs(lh-rh)>1) return -1;
    
    return 1+Math.max(lh,rh);        
    
 
    
    }
}





    public class Solution {
    public int Depth(TreeNode root){
         if(root == null)
             return 0;
         return 1 + Math.max(Depth(root.left), Depth(root.right));
    }
     public boolean isBalanced(TreeNode root) {
         // Start typing your Java solution below
         // DO NOT write main() function
         if(root == null) return true;
         int leftDepth = Depth(root.left);
        int rightDepth = Depth(root.right);
         if(Math.abs(leftDepth - rightDepth) > 1)
             return false;
         else
             return isBalanced(root.left) && isBalanced(root.right);
     }
 }