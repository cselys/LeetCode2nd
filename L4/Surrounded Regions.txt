
http://blog.sina.com.cn/s/blog_b9285de20101j1dt.html

http://codekevin.blogspot.com/2013/03/surrounded-regions.html


public class Solution {

   int m,n;

    char[][] board;

    

    void dfs(int x, int y){

        if(x<0 || x>=m || y<0 || y>=n || board[x][y]!='O') return;

        board[x][y]='D';

        dfs(x-1,y);

        dfs(x+1,y);

        dfs(x,y-1);

        dfs(x,y+1);

    }

    

    public void solve(char[][] board){

        if(board==null || board.length==0) return;

        this.board=board;

        m=board.length;

        n=board[0].length;

        

        for(int j=0;j<n;j++){

            dfs(0,j);

            dfs(m-1,j);

        }

        

        for(int i=1;i<m-1;i++){

            dfs(i,0);

            dfs(i,n-1);

        }

        

        for(int i=0;i<m;i++)

            for(int j=0;j<n;j++){

                if(board[i][j]=='O') board[i][j]='X';

                else if(board[i][j]=='D') board[i][j]='O';

            }  

    }

}


--------------
public class Solution {
   public void solve(char[][] board) {
    if(board == null || board.length == 0) return;
    int m = board.length, n = board[0].length;
    for(int i = 0; i < n; i++) {bfs(0, i, board); bfs(m - 1, i, board);}
    for(int j = 1; j < m- 1; j++) {bfs(j, 0, board); bfs(j, n - 1, board);}
    for(int i = 0; i < n; i++)
        for(int j = 0; j < m; j++)
            if(board[i][j] == 'O') board[i][j] = 'X';
            else if(board[i][j] == '+') board[i][j] = 'O';
}
public void bfs(int i, int j, char[][] board){
    Queue<Integer> q = new LinkedList<Integer>(); 
    visit(i, j, q, board);
    while(!q.isEmpty()){
        int cur = q.poll();
        int t = cur / board[0].length;
        int s = cur % board[0].length;
        visit(t - 1, s, q, board);
        visit(t, s - 1, q, board);
        visit(t + 1, s, q, board);
        visit(t, s + 1, q, board);
    }
}
public void visit(int i, int j, Queue<Integer> q, char[][] board){
    int m = board.length, n = board[0].length;
    if(i < 0 || i >= m || j < 0 || j >= n || board[i][j] != 'O') return;
    board[i][j] = '+';
    q.offer(i * n + j);
}
}