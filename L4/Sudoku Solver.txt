public class Solution {
         private boolean isValid(char[][] board, int x, int y) {
        for (int i = 0; i < 9; ++i) {
            if (board[i][y] == board[x][y] && i != x) {
                return false;
            }
        }
 
        for (int j = 0; j < 9; ++j) {
            if (board[x][j] == board[x][y] && j != y) {
                return false;
            }
        }
 
        int X = x / 3;
        int Y = y / 3;
        for (int i = 3 * X; i < 3 * X + 3; ++i) {
            for (int j = 3 * Y; j < 3 * Y + 3; ++j) {
                if (board[i][j] == board[x][y] && i != x && j != y) {
                    return false;
                }
            }
        }
 
        return true;
    }
 
    private boolean solve(char[][] board) {
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (board[i][j] == '.') {
                    for (int k = 0; k < 9; ++k) {
                        board[i][j] = (char) ('1' + k);
                        if (isValid(board, i, j) && solve(board)) {
                            return true;
                        }
                    }
                    board[i][j] = '.';
                    return false;
                }
            }
        }
        return true;
    }
 
    public void solveSudoku(char[][] board) {
        solve(board);
    }
}



---------------------
public class Solution {
    

 public boolean solveSudoku(char[][] board) {
        // Start typing your Java solution below
        // DO NOT write main() function
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]=='.'){
                    for(int k=0;k<9;k++){
                        board[i][j]=(char)('1'+k);
                        if(isValid(board,i,j) && solveSudoku(board)) return true;
                        board[i][j]='.';
                    }
                    return false;
                }
            }
        }
        return true;   
    }
    
    
    boolean isValid(char[][] board, int iL, int jL){
       boolean[] flag=new boolean[9];
       Set<Character> contained=new HashSet<Character>();
       for(int j=0;j<9;j++){
           if(contained.contains(board[iL][j]))return false;
           if(board[iL][j]>'0' && board[iL][j]<='9') contained.add(board[iL][j]);
       }
       
       contained = new HashSet<Character>();
       for(int j=0;j<9;j++){
           if(contained.contains(board[j][jL]))return false;
           if(board[j][jL]>'0' && board[j][jL]<='9') contained.add(board[j][jL]);
       }
       
       contained = new HashSet<Character>();
       for(int m=0;m<3; m++){
           for(int n=0;n<3;n++){
               int x=iL/3*3+m, y=jL/3*3+n;
               if(contained.contains(board[x][y]))return false;
           if(board[x][y]>'0' && board[x][y]<='9') contained.add(board[x][y]);
               
           }
       }
       
        return true;
    }
}

---------------------

public class Solution {
    static final int N = 9;

    public void solveSudoku(char[][] board) {
        // Start typing your Java solution below
        // DO NOT write main() function
        solveSudoku(board, 0);
    }

    private boolean solveSudoku(char[][] board, int n) {
        if (n == N * N) {
            return true;
        }
        int x = n / N;
        int y = n % N;
        if (board[x][y] != '.') {
            return solveSudoku(board, n + 1);
        }
        int xi, yi;
        int[] choices = new int[N];
        for (int i = 0; i < N; i++) {
            if (board[x][i] != '.') {
                choices[board[x][i] - '1'] = 1;
            }
            if (board[i][y] != '.') {
                choices[board[i][y] - '1'] = 1;
            }
            xi = x / 3 * 3 + i / 3;
            yi = y / 3 * 3 + i % 3;
            if (board[xi][yi] != '.') {
                choices[board[xi][yi] - '1'] = 1;
            }
        }
        for (int i = 0; i < N; i++) {
            if (choices[i] == 0) {
                board[x][y] = (char) ('1' + i);
                if (solveSudoku(board, n + 1)) {
                    return true;
                }
                board[x][y] = '.';
            }
        }
        return false;
    }

}