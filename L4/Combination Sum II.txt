    public class Solution {  
        public ArrayList<ArrayList<Integer>> combinationSum2(int[] a, int target) {  
            // Start typing your Java solution below  
            // DO NOT write main() function  
            ArrayList<ArrayList<Integer>> res=new ArrayList<ArrayList<Integer>>();  
            ArrayList<Integer> l=new ArrayList<Integer>();  
            Arrays.sort(a);  
            solve(a,target,0,0,l,res);  
            return res;  
        }  
        public void solve(int[] a, int target, int sum, int i, ArrayList<Integer> l, ArrayList<ArrayList<Integer>> res){  
            if(sum==target){ res.add(l); return;}  
            if(sum>target||i>=a.length) return;  
            int n=0;  
            int j=i;  
            while(j<a.length&&a[j]==a[i]) j++;//diff  
            while(n<=j-i){//diff  
                solve(a,target,sum+n*a[i],j,l,res);//diff  
                ArrayList<Integer> tmp=new ArrayList<Integer>(l);  
                l=tmp;  
                l.add(a[i]);  
                n++;  
                  
            }  
            return;  
        }  
          
    }  



--------------------------
package fantasist.InterviewProblems.leetcode.passed;

import java.util.ArrayList;
import java.util.Arrays;

public class CombinationSumII {

	int[] candidates;

	private void getCombination(int idx, int target, ArrayList<ArrayList<Integer>> res, ArrayList<Integer> temp) {
		if (idx >= candidates.length) {
			return;
		}
		if (candidates[idx] == target) {
			ArrayList<Integer> ans = new ArrayList<Integer>(temp);
			ans.add(candidates[idx]);
			res.add(ans);
		} else if (candidates[idx] < target) {
			temp.add(candidates[idx]);
			getCombination(idx+1, target - candidates[idx], res, temp);
			temp.remove(temp.size()-1);

			int newIdx = idx + 1;
			while(newIdx < candidates.length) {
				if (candidates[newIdx] != candidates[idx])
					break;
				newIdx++;
			}
			if (newIdx < candidates.length) {
				getCombination(newIdx, target, res, temp);
			}
		} else {
			return;
		}
	}

    public ArrayList<ArrayList<Integer>> combinationSum2(int[] num, int target) {
    	ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if (num == null || num.length < 1 || target <= 0) {
        	return res;
        }
        Arrays.sort(num);
        candidates = num;
        
        ArrayList<Integer> temp = new ArrayList<Integer>();
        getCombination(0, target, res, temp);
        
        return res;
    }
    
	public static void main(String[] args) {
		CombinationSumII cs = new CombinationSumII();
		int[] num = {10,1,2,7,6,1,5};
		int target = 8;

		ArrayList<ArrayList<Integer>> res = cs.combinationSum2(num, target);
		if (res != null && !res.isEmpty()) {
			for (ArrayList<Integer> sol : res) {
				if (!sol.isEmpty()) {
					for (Integer i : sol) {
						System.out.print(i + " ");
					}
					System.out.println();
				}
			}
		}
	}

}

-----------------
public class Solution {  
    ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();  
    public void DFS(int[] candidates,ArrayList<Integer> current,int index,int target){  
        if(target<0 || index>candidates.length-1)  
            return;  
        else{  
            // left branch, not add the node  
            DFS(candidates,new ArrayList<Integer>(current),index+1,target);  
            // right branch, add the node  
            int node = candidates[index];  
            current.add(node);  
            target -= node;  
            if(target==0)  
                res.add(current);  
            DFS(candidates,new ArrayList<Integer>(current),index+1,target);   
        }  
        return;  
    }  
      
    public ArrayList<ArrayList<Integer>> combinationSum2(int[] candidates, int target) {  
        // Start typing your Java solution below  
        // DO NOT write main() function  
        int len = candidates.length;  
        if(len<1)  
            return res;  
        res.clear();  
        Arrays.sort(candidates);  
        ArrayList<Integer> current = new ArrayList<Integer>();  
        DFS(candidates,current,0,target);  
        //remove duplicate from res  
        HashSet st = new HashSet();  
        st.addAll(res);  
        res.clear();  
        res.addAll(st);  
          
        return res;  
    }  
} 