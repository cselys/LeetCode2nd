public class Solution {
    ArrayList<TreeNode> list;
    TreeNode prev;
 
    public void inorder(TreeNode root) {
        if(root==null) return;
        inorder(root.left);
        if(prev!=null && prev.val>root.val) {
            if(!list.contains(prev)) list.add(prev);
            if(!list.contains(root)) list.add(root);
        }
        prev = root;
        inorder(root.right);
    }
 
    public void recoverTree(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        list = new ArrayList();
        prev = null;
        inorder(root);
        int temp = list.get(0).val;
        list.get(0).val = list.get(list.size()-1).val;
        list.get(list.size()-1).val = temp;
    }
 
}

http://yucoding.blogspot.com/2013/03/leetcode-question-75-recover-binary.html
---------------------------------
http://tech-wonderland.net/blog/leetcode-recover-binary-search-tree.html

public class Solution {
    public void recoverTree(TreeNode root) {
        if (root == null) return;
        ArrayList<TreeNode> nodes = new ArrayList<TreeNode>();
        findWrongNode(root, nodes);
        TreeNode a = null, b = null;
        int i = 0;
        for (i = 0; i < nodes.size() - 1; i++) {
            if (nodes.get(i).val > nodes.get(i + 1).val) {
             a = nodes.get(i);
         break;
         }
        }
        for (int j = i + 1; j < nodes.size() - 1; j++) {
         if (nodes.get(j).val > nodes.get(j + 1).val) {
         b = nodes.get(j + 1);
         break;
         }
        }
        if (b == null)
         b = nodes.get(i + 1);
        
        int t = a.val;
        a.val = b.val;
        b.val = t;
    }

private void findWrongNode(TreeNode root, ArrayList<TreeNode> nodes) {
if (root == null) return;
findWrongNode(root.left, nodes);
nodes.add(root);
findWrongNode(root.right, nodes);
}
}






-----------
cpp

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *first;
    TreeNode *second;
    TreeNode *pre;
     
    void inOrder(TreeNode *root){
        if (root==NULL){return;}
        else{
            inOrder(root->left);
            if (pre == NULL){pre = root;}
            else {
                if (pre->val > root->val){
                    if (first==NULL) {first = pre;}
                    second = root;
                }
                pre = root;
            }
            inOrder(root->right);
             
        }
    }
    void recoverTree(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        pre = NULL;
        first = NULL;
        second= NULL;
        inOrder(root);
        int val;
        val = first->val;
        first->val=second->val;
        second->val=val;
        return;
    }
};


----------------
public class Solution {
   ArrayList<TreeNode> nodes;
     ArrayList<Integer> values;
     public void inOrder(TreeNode root){

         if(root == null) return;
         inOrder(root.left);
         values.add(root.val);
         nodes.add(root);
         inOrder(root.right);
     }
     public void recoverTree(TreeNode root) {
         // Start typing your Java solution below
         // DO NOT write main() function
         nodes = new ArrayList<TreeNode>();
         values = new ArrayList<Integer>();
         inOrder(root);
         Collections.sort(values);
         int index = 0;
         for(TreeNode n : nodes){
             n.val = values.get(index++);
         }
         
     }
 }