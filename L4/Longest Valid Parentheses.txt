public class Solution {
    public int longestValidParentheses(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if (s == null || s.length() == 0) return 0;
        ArrayList<Integer> pos = new ArrayList<Integer>();
        HashMap<Integer, Integer> pair = new HashMap<Integer, Integer>();
        int len = s.length();
        int max = 0;
        for (int i = 0; i < len; i++) {
            if (s.charAt(i) == '(') {
                pos.add(i);
            }
            else if (!pos.isEmpty()) {
                int left = pos.remove(pos.size() - 1);
                if (pair.containsKey(left - 1)) {
                    left = pair.get(left - 1);
                }
                pair.put(i, left);
                max = Math.max(i - left + 1, max);
            }
        }
        return max;
    }
}

http://www.mitbbs.com/article_t/JobHunting/32066231.html



public class Solution {
    public int longestValidParentheses(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        char[] c = s.toCharArray();
        Stack<Integer> store = new Stack<Integer>();
        int[] right = new int[c.length];
        
        int res=0;
        for(int i=0;i<c.length;i++){
            if(c[i]=='('){
                store.push(i);
            }else{
                if(!store.isEmpty()){
                    right[i]=store.pop()+1;
                    int temp = right[i]-2;
                    if(temp>=0 && right[temp]>0){
                        right[i]=right[temp];    
                    } 
                    res=Math.max(i-right[i]+2,res);
                }
            }
        }
        return res;
    }
}




ÄÃÕâ¸öÁ·Á·DP£º
    public int longestValidParentheses(String s) {
        int n = s.length();
        int[] dp = new int[n+1];
        int max = 0;
        for(int i = n-2; i >= 0; i--) {
            if(s.charAt(i) == '(') {
                int j = i+1+dp[i+1];
                if(j < n && s.charAt(j) == ')') {
                    dp[i] = 2+dp[i+1]+dp[j+1];
                    max = Math.max(max, dp[i]);
                }
            }
        }
        
        return max;
    }
http://blog.csdn.net/abcbc/article/details/8826782