public class Solution {
    int max;
    public int maxPathSum(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        max = (root==null)? 0: root.val;
        findMax(root);
        return max;
    }
    public int findMax(TreeNode node){
        if(node == null) return 0;
        int left = Math.max(findMax(node.left),0);
        int right = Math.max(findMax(node.right),0);
        max = Math.max(node.val + left + right, max);
        return node.val + Math.max(left,right);
    }
}


http://tech-wonderland.net/blog/leetcode-binary-tree-maximum-path-sum.html

public class Solution {
    public int maxPathSum(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int[] res = maxPathSums(root);
        return res[1];
    }
    
    public int[] maxPathSums(TreeNode root){
        int[] res = new int[2];
        if(root==null){
            res[0]=Integer.MIN_VALUE;
            res[1]=Integer.MIN_VALUE;
            return res;
        }
        int[] fromLeft = maxPathSums(root.left),
              fromRight = maxPathSums(root.right);
        
        int temp1 = fromLeft[0]>0?(fromLeft[0]+root.val):root.val;
        int temp2 = fromRight[0]>0?(fromRight[0]+root.val):root.val;
        
        res[0]=Math.max(temp1,temp2);
        res[1]=Math.max(fromLeft[1],Math.max(fromRight[1], Math.max(temp1+temp2-root.val,res[0])));
        
        return res;
    }
}





static int max = Integer.MIN_VALUE;
public static int maxPathSum(TreeNode root) {
max = Integer.MIN_VALUE;
dfs(root);
return max;
}
public static int dfs(TreeNode root) {
if(root == null) return 0;
int l = dfs(root.left);
int r = dfs(root.right);
int m = root.val;
if(l>0) m += l;
if(r>0) m += r;
max = Math.max(max, m);
 
int side = Math.max(l,r);
return side>0 ? root.val + side: root.val;
}
