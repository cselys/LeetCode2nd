public class Solution {
    public int[] searchRange(int[] A, int target) {
        // Start typing your Java solution below
        // DO NOT write main() function
        
        int[] ret=new int[2];
        ret[0]=search(A,target,0,A.length,true);
        ret[1]=search(A,target,0,A.length,false);
        return ret;        
    }
    
    int search(int[] A, int target, int start, int end, boolean leftmost){
        if(start==end) return -1;
        
        int mid=(start+end)/2;
        
        if(A[mid]>target)
        return search(A,target, start,mid,leftmost);
        else if(A[mid]<target)
        return search(A,target, mid+1,end,leftmost);
        else{
            if(leftmost){
                if(mid==0 || A[mid]!=A[mid-1]) return mid;
                else return search(A,target, start,mid,leftmost);
            }else{
                if(mid==A.length-1 || A[mid]!=A[mid+1]) return mid;
                else return search(A,target, mid+1,end,leftmost);
                
            }
            
        }
        
    }
}


-------------------------

public class Solution {  
    public int[] searchRange(int[] A, int target) {  
        // Start typing your Java solution below  
        // DO NOT write main() function  
        int[] res = new int[2];  
        res[0] = lowerbound(A,target);  
        res[1] = upperbound(A,target);  
        return res;  
    }  
      
    public static int upperbound(int[] num, int target){  
        //find last 2,  
        int low=0;  
        int high=num.length - 1;  
        int mid = low + (high-low+1)/2;  
          
        while(low<high){  
            mid = low + (high-low+1)/2;  
            if(num[mid]<=target){  
                low = mid;  
            } else {  
                high = mid - 1;  
            }  
        }  
        return num[low] == target ? low : -1;  
    }  
      
    public static int lowerbound(int[] num, int target){  
        //find first 2.  
        int low=0;  
        int high=num.length - 1;  
        int mid = low + (high-low)/2;  
          
        while(low<high) {  
            mid = low + (high-low)/2;  
            if(num[mid]>=target){  
                high = mid;  
            } else {  
                low = mid + 1;  
            }  
        }  
        return num[high] == target ? high : -1;  
    }  
}  